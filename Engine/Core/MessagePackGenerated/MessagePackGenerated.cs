// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(115)
            {
                { typeof(global::Staple.Internal.MeshAssetNode[]), 0 },
                { typeof(global::System.Collections.Generic.Dictionary<global::Staple.AppPlatform, global::Staple.Internal.TextureMetadataOverride>), 1 },
                { typeof(global::System.Collections.Generic.Dictionary<global::Staple.AppPlatform, global::System.Collections.Generic.List<global::Staple.RendererType>>), 2 },
                { typeof(global::System.Collections.Generic.Dictionary<string, global::Staple.Internal.MaterialParameter>), 3 },
                { typeof(global::System.Collections.Generic.Dictionary<string, global::Staple.Internal.SerializableShaderData>), 4 },
                { typeof(global::System.Collections.Generic.Dictionary<string, global::Staple.Internal.SerializableStapleAssetParameter>), 5 },
                { typeof(global::System.Collections.Generic.HashSet<string>), 6 },
                { typeof(global::System.Collections.Generic.List<global::Staple.ColliderMask.Item>), 7 },
                { typeof(global::System.Collections.Generic.List<global::Staple.Internal.MeshAssetAnimation>), 8 },
                { typeof(global::System.Collections.Generic.List<global::Staple.Internal.MeshAssetAnimationChannel>), 9 },
                { typeof(global::System.Collections.Generic.List<global::Staple.Internal.MeshAssetBone>), 10 },
                { typeof(global::System.Collections.Generic.List<global::Staple.Internal.MeshAssetMeshInfo>), 11 },
                { typeof(global::System.Collections.Generic.List<global::Staple.Internal.MeshAssetQuaternionAnimationKey>), 12 },
                { typeof(global::System.Collections.Generic.List<global::Staple.Internal.MeshAssetVectorAnimationKey>), 13 },
                { typeof(global::System.Collections.Generic.List<global::Staple.Internal.SceneComponent>), 14 },
                { typeof(global::System.Collections.Generic.List<global::Staple.Internal.SceneComponentParameter>), 15 },
                { typeof(global::System.Collections.Generic.List<global::Staple.Internal.SceneObject>), 16 },
                { typeof(global::System.Collections.Generic.List<global::Staple.Internal.ShaderInstanceParameter>), 17 },
                { typeof(global::System.Collections.Generic.List<global::Staple.Internal.ShaderUniform>), 18 },
                { typeof(global::System.Collections.Generic.List<global::Staple.Internal.TextureSpriteInfo>), 19 },
                { typeof(global::System.Collections.Generic.List<global::Staple.Internal.Vector2Holder>), 20 },
                { typeof(global::System.Collections.Generic.List<global::Staple.Internal.Vector3Holder>), 21 },
                { typeof(global::System.Collections.Generic.List<global::Staple.Internal.Vector4Holder>), 22 },
                { typeof(global::System.Collections.Generic.List<global::Staple.RendererType>), 23 },
                { typeof(global::System.Collections.Generic.List<int>), 24 },
                { typeof(global::System.Collections.Generic.List<string>), 25 },
                { typeof(global::Staple.AppPlatform), 26 },
                { typeof(global::Staple.AppProfilingMode), 27 },
                { typeof(global::Staple.BlendMode), 28 },
                { typeof(global::Staple.CullingMode), 29 },
                { typeof(global::Staple.Internal.AudioClipFormat), 30 },
                { typeof(global::Staple.Internal.AudioRecompression), 31 },
                { typeof(global::Staple.Internal.FontCharacterSet), 32 },
                { typeof(global::Staple.Internal.MaterialParameterSource), 33 },
                { typeof(global::Staple.Internal.MaterialParameterType), 34 },
                { typeof(global::Staple.Internal.MeshAssetAnimationStateBehaviour), 35 },
                { typeof(global::Staple.Internal.MeshAssetRotation), 36 },
                { typeof(global::Staple.Internal.MeshAssetType), 37 },
                { typeof(global::Staple.Internal.SceneObjectKind), 38 },
                { typeof(global::Staple.Internal.ShaderType), 39 },
                { typeof(global::Staple.Internal.ShaderUniformType), 40 },
                { typeof(global::Staple.Internal.SpriteTextureMethod), 41 },
                { typeof(global::Staple.Internal.TextureFilter), 42 },
                { typeof(global::Staple.Internal.TextureMetadataFormat), 43 },
                { typeof(global::Staple.Internal.TextureMetadataQuality), 44 },
                { typeof(global::Staple.Internal.TextureSpriteRotation), 45 },
                { typeof(global::Staple.Internal.TextureType), 46 },
                { typeof(global::Staple.Internal.TextureWrap), 47 },
                { typeof(global::Staple.MaterialLighting), 48 },
                { typeof(global::Staple.MeshTopology), 49 },
                { typeof(global::Staple.RendererType), 50 },
                { typeof(global::Staple.StandardTextureColorComponents), 51 },
                { typeof(global::Staple.WindowMode), 52 },
                { typeof(global::Staple.AppSettings), 53 },
                { typeof(global::Staple.ColliderMask.Item), 54 },
                { typeof(global::Staple.Color), 55 },
                { typeof(global::Staple.Color32), 56 },
                { typeof(global::Staple.Internal.AppSettingsHeader), 57 },
                { typeof(global::Staple.Internal.AssetHolder), 58 },
                { typeof(global::Staple.Internal.AudioClipMetadata), 59 },
                { typeof(global::Staple.Internal.FolderAsset), 60 },
                { typeof(global::Staple.Internal.FontGlyphInfo), 61 },
                { typeof(global::Staple.Internal.FontMetadata), 62 },
                { typeof(global::Staple.Internal.MaterialMetadata), 63 },
                { typeof(global::Staple.Internal.MaterialParameter), 64 },
                { typeof(global::Staple.Internal.MeshAssetAnimation), 65 },
                { typeof(global::Staple.Internal.MeshAssetAnimationChannel), 66 },
                { typeof(global::Staple.Internal.MeshAssetBone), 67 },
                { typeof(global::Staple.Internal.MeshAssetMeshInfo), 68 },
                { typeof(global::Staple.Internal.MeshAssetMetadata), 69 },
                { typeof(global::Staple.Internal.MeshAssetNode), 70 },
                { typeof(global::Staple.Internal.MeshAssetQuaternionAnimationKey), 71 },
                { typeof(global::Staple.Internal.MeshAssetVectorAnimationKey), 72 },
                { typeof(global::Staple.Internal.ResourcePak.Entry), 73 },
                { typeof(global::Staple.Internal.ResourcePak.Header), 74 },
                { typeof(global::Staple.Internal.SceneComponent), 75 },
                { typeof(global::Staple.Internal.SceneComponentParameter), 76 },
                { typeof(global::Staple.Internal.SceneList), 77 },
                { typeof(global::Staple.Internal.SceneListHeader), 78 },
                { typeof(global::Staple.Internal.SceneObject), 79 },
                { typeof(global::Staple.Internal.SceneObjectTransform), 80 },
                { typeof(global::Staple.Internal.SerializableAudioClip), 81 },
                { typeof(global::Staple.Internal.SerializableAudioClipHeader), 82 },
                { typeof(global::Staple.Internal.SerializableFont), 83 },
                { typeof(global::Staple.Internal.SerializableFontHeader), 84 },
                { typeof(global::Staple.Internal.SerializableMaterial), 85 },
                { typeof(global::Staple.Internal.SerializableMaterialHeader), 86 },
                { typeof(global::Staple.Internal.SerializableMeshAsset), 87 },
                { typeof(global::Staple.Internal.SerializableMeshAssetHeader), 88 },
                { typeof(global::Staple.Internal.SerializablePrefab), 89 },
                { typeof(global::Staple.Internal.SerializablePrefabHeader), 90 },
                { typeof(global::Staple.Internal.SerializableScene), 91 },
                { typeof(global::Staple.Internal.SerializableSceneHeader), 92 },
                { typeof(global::Staple.Internal.SerializableShader), 93 },
                { typeof(global::Staple.Internal.SerializableShaderData), 94 },
                { typeof(global::Staple.Internal.SerializableShaderHeader), 95 },
                { typeof(global::Staple.Internal.SerializableStapleAsset), 96 },
                { typeof(global::Staple.Internal.SerializableStapleAssetContainer), 97 },
                { typeof(global::Staple.Internal.SerializableStapleAssetHeader), 98 },
                { typeof(global::Staple.Internal.SerializableStapleAssetParameter), 99 },
                { typeof(global::Staple.Internal.SerializableTexture), 100 },
                { typeof(global::Staple.Internal.SerializableTextureCPUData), 101 },
                { typeof(global::Staple.Internal.SerializableTextureHeader), 102 },
                { typeof(global::Staple.Internal.ShaderInstanceParameter), 103 },
                { typeof(global::Staple.Internal.ShaderMetadata), 104 },
                { typeof(global::Staple.Internal.ShaderUniform), 105 },
                { typeof(global::Staple.Internal.TextureMetadata), 106 },
                { typeof(global::Staple.Internal.TextureMetadataOverride), 107 },
                { typeof(global::Staple.Internal.TextureSpriteInfo), 108 },
                { typeof(global::Staple.Internal.Vector2Holder), 109 },
                { typeof(global::Staple.Internal.Vector3Holder), 110 },
                { typeof(global::Staple.Internal.Vector4Holder), 111 },
                { typeof(global::Staple.Rect), 112 },
                { typeof(global::Staple.RectFloat), 113 },
                { typeof(global::Staple.Vector2Int), 114 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::Staple.Internal.MeshAssetNode>();
                case 1: return new global::MessagePack.Formatters.DictionaryFormatter<global::Staple.AppPlatform, global::Staple.Internal.TextureMetadataOverride>();
                case 2: return new global::MessagePack.Formatters.DictionaryFormatter<global::Staple.AppPlatform, global::System.Collections.Generic.List<global::Staple.RendererType>>();
                case 3: return new global::MessagePack.Formatters.DictionaryFormatter<string, global::Staple.Internal.MaterialParameter>();
                case 4: return new global::MessagePack.Formatters.DictionaryFormatter<string, global::Staple.Internal.SerializableShaderData>();
                case 5: return new global::MessagePack.Formatters.DictionaryFormatter<string, global::Staple.Internal.SerializableStapleAssetParameter>();
                case 6: return new global::MessagePack.Formatters.HashSetFormatter<string>();
                case 7: return new global::MessagePack.Formatters.ListFormatter<global::Staple.ColliderMask.Item>();
                case 8: return new global::MessagePack.Formatters.ListFormatter<global::Staple.Internal.MeshAssetAnimation>();
                case 9: return new global::MessagePack.Formatters.ListFormatter<global::Staple.Internal.MeshAssetAnimationChannel>();
                case 10: return new global::MessagePack.Formatters.ListFormatter<global::Staple.Internal.MeshAssetBone>();
                case 11: return new global::MessagePack.Formatters.ListFormatter<global::Staple.Internal.MeshAssetMeshInfo>();
                case 12: return new global::MessagePack.Formatters.ListFormatter<global::Staple.Internal.MeshAssetQuaternionAnimationKey>();
                case 13: return new global::MessagePack.Formatters.ListFormatter<global::Staple.Internal.MeshAssetVectorAnimationKey>();
                case 14: return new global::MessagePack.Formatters.ListFormatter<global::Staple.Internal.SceneComponent>();
                case 15: return new global::MessagePack.Formatters.ListFormatter<global::Staple.Internal.SceneComponentParameter>();
                case 16: return new global::MessagePack.Formatters.ListFormatter<global::Staple.Internal.SceneObject>();
                case 17: return new global::MessagePack.Formatters.ListFormatter<global::Staple.Internal.ShaderInstanceParameter>();
                case 18: return new global::MessagePack.Formatters.ListFormatter<global::Staple.Internal.ShaderUniform>();
                case 19: return new global::MessagePack.Formatters.ListFormatter<global::Staple.Internal.TextureSpriteInfo>();
                case 20: return new global::MessagePack.Formatters.ListFormatter<global::Staple.Internal.Vector2Holder>();
                case 21: return new global::MessagePack.Formatters.ListFormatter<global::Staple.Internal.Vector3Holder>();
                case 22: return new global::MessagePack.Formatters.ListFormatter<global::Staple.Internal.Vector4Holder>();
                case 23: return new global::MessagePack.Formatters.ListFormatter<global::Staple.RendererType>();
                case 24: return new global::MessagePack.Formatters.ListFormatter<int>();
                case 25: return new global::MessagePack.Formatters.ListFormatter<string>();
                case 26: return new MessagePack.Formatters.Staple.AppPlatformFormatter();
                case 27: return new MessagePack.Formatters.Staple.AppProfilingModeFormatter();
                case 28: return new MessagePack.Formatters.Staple.BlendModeFormatter();
                case 29: return new MessagePack.Formatters.Staple.CullingModeFormatter();
                case 30: return new MessagePack.Formatters.Staple.Internal.AudioClipFormatFormatter();
                case 31: return new MessagePack.Formatters.Staple.Internal.AudioRecompressionFormatter();
                case 32: return new MessagePack.Formatters.Staple.Internal.FontCharacterSetFormatter();
                case 33: return new MessagePack.Formatters.Staple.Internal.MaterialParameterSourceFormatter();
                case 34: return new MessagePack.Formatters.Staple.Internal.MaterialParameterTypeFormatter();
                case 35: return new MessagePack.Formatters.Staple.Internal.MeshAssetAnimationStateBehaviourFormatter();
                case 36: return new MessagePack.Formatters.Staple.Internal.MeshAssetRotationFormatter();
                case 37: return new MessagePack.Formatters.Staple.Internal.MeshAssetTypeFormatter();
                case 38: return new MessagePack.Formatters.Staple.Internal.SceneObjectKindFormatter();
                case 39: return new MessagePack.Formatters.Staple.Internal.ShaderTypeFormatter();
                case 40: return new MessagePack.Formatters.Staple.Internal.ShaderUniformTypeFormatter();
                case 41: return new MessagePack.Formatters.Staple.Internal.SpriteTextureMethodFormatter();
                case 42: return new MessagePack.Formatters.Staple.Internal.TextureFilterFormatter();
                case 43: return new MessagePack.Formatters.Staple.Internal.TextureMetadataFormatFormatter();
                case 44: return new MessagePack.Formatters.Staple.Internal.TextureMetadataQualityFormatter();
                case 45: return new MessagePack.Formatters.Staple.Internal.TextureSpriteRotationFormatter();
                case 46: return new MessagePack.Formatters.Staple.Internal.TextureTypeFormatter();
                case 47: return new MessagePack.Formatters.Staple.Internal.TextureWrapFormatter();
                case 48: return new MessagePack.Formatters.Staple.MaterialLightingFormatter();
                case 49: return new MessagePack.Formatters.Staple.MeshTopologyFormatter();
                case 50: return new MessagePack.Formatters.Staple.RendererTypeFormatter();
                case 51: return new MessagePack.Formatters.Staple.StandardTextureColorComponentsFormatter();
                case 52: return new MessagePack.Formatters.Staple.WindowModeFormatter();
                case 53: return new MessagePack.Formatters.Staple.AppSettingsFormatter();
                case 54: return new MessagePack.Formatters.Staple.ColliderMask_ItemFormatter();
                case 55: return new MessagePack.Formatters.Staple.ColorFormatter();
                case 56: return new MessagePack.Formatters.Staple.Color32Formatter();
                case 57: return new MessagePack.Formatters.Staple.Internal.AppSettingsHeaderFormatter();
                case 58: return new MessagePack.Formatters.Staple.Internal.AssetHolderFormatter();
                case 59: return new MessagePack.Formatters.Staple.Internal.AudioClipMetadataFormatter();
                case 60: return new MessagePack.Formatters.Staple.Internal.FolderAssetFormatter();
                case 61: return new MessagePack.Formatters.Staple.Internal.FontGlyphInfoFormatter();
                case 62: return new MessagePack.Formatters.Staple.Internal.FontMetadataFormatter();
                case 63: return new MessagePack.Formatters.Staple.Internal.MaterialMetadataFormatter();
                case 64: return new MessagePack.Formatters.Staple.Internal.MaterialParameterFormatter();
                case 65: return new MessagePack.Formatters.Staple.Internal.MeshAssetAnimationFormatter();
                case 66: return new MessagePack.Formatters.Staple.Internal.MeshAssetAnimationChannelFormatter();
                case 67: return new MessagePack.Formatters.Staple.Internal.MeshAssetBoneFormatter();
                case 68: return new MessagePack.Formatters.Staple.Internal.MeshAssetMeshInfoFormatter();
                case 69: return new MessagePack.Formatters.Staple.Internal.MeshAssetMetadataFormatter();
                case 70: return new MessagePack.Formatters.Staple.Internal.MeshAssetNodeFormatter();
                case 71: return new MessagePack.Formatters.Staple.Internal.MeshAssetQuaternionAnimationKeyFormatter();
                case 72: return new MessagePack.Formatters.Staple.Internal.MeshAssetVectorAnimationKeyFormatter();
                case 73: return new MessagePack.Formatters.Staple.Internal.ResourcePak_EntryFormatter();
                case 74: return new MessagePack.Formatters.Staple.Internal.ResourcePak_HeaderFormatter();
                case 75: return new MessagePack.Formatters.Staple.Internal.SceneComponentFormatter();
                case 76: return new MessagePack.Formatters.Staple.Internal.SceneComponentParameterFormatter();
                case 77: return new MessagePack.Formatters.Staple.Internal.SceneListFormatter();
                case 78: return new MessagePack.Formatters.Staple.Internal.SceneListHeaderFormatter();
                case 79: return new MessagePack.Formatters.Staple.Internal.SceneObjectFormatter();
                case 80: return new MessagePack.Formatters.Staple.Internal.SceneObjectTransformFormatter();
                case 81: return new MessagePack.Formatters.Staple.Internal.SerializableAudioClipFormatter();
                case 82: return new MessagePack.Formatters.Staple.Internal.SerializableAudioClipHeaderFormatter();
                case 83: return new MessagePack.Formatters.Staple.Internal.SerializableFontFormatter();
                case 84: return new MessagePack.Formatters.Staple.Internal.SerializableFontHeaderFormatter();
                case 85: return new MessagePack.Formatters.Staple.Internal.SerializableMaterialFormatter();
                case 86: return new MessagePack.Formatters.Staple.Internal.SerializableMaterialHeaderFormatter();
                case 87: return new MessagePack.Formatters.Staple.Internal.SerializableMeshAssetFormatter();
                case 88: return new MessagePack.Formatters.Staple.Internal.SerializableMeshAssetHeaderFormatter();
                case 89: return new MessagePack.Formatters.Staple.Internal.SerializablePrefabFormatter();
                case 90: return new MessagePack.Formatters.Staple.Internal.SerializablePrefabHeaderFormatter();
                case 91: return new MessagePack.Formatters.Staple.Internal.SerializableSceneFormatter();
                case 92: return new MessagePack.Formatters.Staple.Internal.SerializableSceneHeaderFormatter();
                case 93: return new MessagePack.Formatters.Staple.Internal.SerializableShaderFormatter();
                case 94: return new MessagePack.Formatters.Staple.Internal.SerializableShaderDataFormatter();
                case 95: return new MessagePack.Formatters.Staple.Internal.SerializableShaderHeaderFormatter();
                case 96: return new MessagePack.Formatters.Staple.Internal.SerializableStapleAssetFormatter();
                case 97: return new MessagePack.Formatters.Staple.Internal.SerializableStapleAssetContainerFormatter();
                case 98: return new MessagePack.Formatters.Staple.Internal.SerializableStapleAssetHeaderFormatter();
                case 99: return new MessagePack.Formatters.Staple.Internal.SerializableStapleAssetParameterFormatter();
                case 100: return new MessagePack.Formatters.Staple.Internal.SerializableTextureFormatter();
                case 101: return new MessagePack.Formatters.Staple.Internal.SerializableTextureCPUDataFormatter();
                case 102: return new MessagePack.Formatters.Staple.Internal.SerializableTextureHeaderFormatter();
                case 103: return new MessagePack.Formatters.Staple.Internal.ShaderInstanceParameterFormatter();
                case 104: return new MessagePack.Formatters.Staple.Internal.ShaderMetadataFormatter();
                case 105: return new MessagePack.Formatters.Staple.Internal.ShaderUniformFormatter();
                case 106: return new MessagePack.Formatters.Staple.Internal.TextureMetadataFormatter();
                case 107: return new MessagePack.Formatters.Staple.Internal.TextureMetadataOverrideFormatter();
                case 108: return new MessagePack.Formatters.Staple.Internal.TextureSpriteInfoFormatter();
                case 109: return new MessagePack.Formatters.Staple.Internal.Vector2HolderFormatter();
                case 110: return new MessagePack.Formatters.Staple.Internal.Vector3HolderFormatter();
                case 111: return new MessagePack.Formatters.Staple.Internal.Vector4HolderFormatter();
                case 112: return new MessagePack.Formatters.Staple.RectFormatter();
                case 113: return new MessagePack.Formatters.Staple.RectFloatFormatter();
                case 114: return new MessagePack.Formatters.Staple.Vector2IntFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Staple
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class AppPlatformFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.AppPlatform>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.AppPlatform value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.AppPlatform Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.AppPlatform)reader.ReadInt32();
        }
    }

    public sealed class AppProfilingModeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.AppProfilingMode>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.AppProfilingMode value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.AppProfilingMode Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.AppProfilingMode)reader.ReadInt32();
        }
    }

    public sealed class BlendModeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.BlendMode>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.BlendMode value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((UInt64)value);
        }

        public global::Staple.BlendMode Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.BlendMode)reader.ReadUInt64();
        }
    }

    public sealed class CullingModeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.CullingMode>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.CullingMode value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.CullingMode Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.CullingMode)reader.ReadInt32();
        }
    }

    public sealed class MaterialLightingFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.MaterialLighting>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.MaterialLighting value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.MaterialLighting Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.MaterialLighting)reader.ReadInt32();
        }
    }

    public sealed class MeshTopologyFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.MeshTopology>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.MeshTopology value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((UInt64)value);
        }

        public global::Staple.MeshTopology Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.MeshTopology)reader.ReadUInt64();
        }
    }

    public sealed class RendererTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.RendererType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.RendererType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.RendererType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.RendererType)reader.ReadInt32();
        }
    }

    public sealed class StandardTextureColorComponentsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.StandardTextureColorComponents>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.StandardTextureColorComponents value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.StandardTextureColorComponents Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.StandardTextureColorComponents)reader.ReadInt32();
        }
    }

    public sealed class WindowModeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.WindowMode>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.WindowMode value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.WindowMode Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.WindowMode)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Staple.Internal
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class AudioClipFormatFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.AudioClipFormat>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.AudioClipFormat value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.AudioClipFormat Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.AudioClipFormat)reader.ReadInt32();
        }
    }

    public sealed class AudioRecompressionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.AudioRecompression>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.AudioRecompression value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.AudioRecompression Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.AudioRecompression)reader.ReadInt32();
        }
    }

    public sealed class FontCharacterSetFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.FontCharacterSet>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.FontCharacterSet value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.FontCharacterSet Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.FontCharacterSet)reader.ReadInt32();
        }
    }

    public sealed class MaterialParameterSourceFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.MaterialParameterSource>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.MaterialParameterSource value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.MaterialParameterSource Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.MaterialParameterSource)reader.ReadInt32();
        }
    }

    public sealed class MaterialParameterTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.MaterialParameterType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.MaterialParameterType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.MaterialParameterType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.MaterialParameterType)reader.ReadInt32();
        }
    }

    public sealed class MeshAssetAnimationStateBehaviourFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.MeshAssetAnimationStateBehaviour>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.MeshAssetAnimationStateBehaviour value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.MeshAssetAnimationStateBehaviour Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.MeshAssetAnimationStateBehaviour)reader.ReadInt32();
        }
    }

    public sealed class MeshAssetRotationFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.MeshAssetRotation>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.MeshAssetRotation value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.MeshAssetRotation Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.MeshAssetRotation)reader.ReadInt32();
        }
    }

    public sealed class MeshAssetTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.MeshAssetType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.MeshAssetType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.MeshAssetType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.MeshAssetType)reader.ReadInt32();
        }
    }

    public sealed class SceneObjectKindFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SceneObjectKind>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.SceneObjectKind value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.SceneObjectKind Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.SceneObjectKind)reader.ReadInt32();
        }
    }

    public sealed class ShaderTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.ShaderType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.ShaderType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.ShaderType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.ShaderType)reader.ReadInt32();
        }
    }

    public sealed class ShaderUniformTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.ShaderUniformType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.ShaderUniformType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.ShaderUniformType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.ShaderUniformType)reader.ReadInt32();
        }
    }

    public sealed class SpriteTextureMethodFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SpriteTextureMethod>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.SpriteTextureMethod value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.SpriteTextureMethod Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.SpriteTextureMethod)reader.ReadInt32();
        }
    }

    public sealed class TextureFilterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.TextureFilter>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.TextureFilter value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.TextureFilter Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.TextureFilter)reader.ReadInt32();
        }
    }

    public sealed class TextureMetadataFormatFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.TextureMetadataFormat>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.TextureMetadataFormat value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.TextureMetadataFormat Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.TextureMetadataFormat)reader.ReadInt32();
        }
    }

    public sealed class TextureMetadataQualityFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.TextureMetadataQuality>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.TextureMetadataQuality value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.TextureMetadataQuality Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.TextureMetadataQuality)reader.ReadInt32();
        }
    }

    public sealed class TextureSpriteRotationFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.TextureSpriteRotation>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.TextureSpriteRotation value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.TextureSpriteRotation Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.TextureSpriteRotation)reader.ReadInt32();
        }
    }

    public sealed class TextureTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.TextureType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.TextureType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.TextureType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.TextureType)reader.ReadInt32();
        }
    }

    public sealed class TextureWrapFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.TextureWrap>
    {
        public void Serialize(ref MessagePackWriter writer, global::Staple.Internal.TextureWrap value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Staple.Internal.TextureWrap Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Staple.Internal.TextureWrap)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Staple
{
    using global::System.Buffers;
    using global::MessagePack;

    public sealed class AppSettingsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.AppSettings>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.AppSettings value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(26);
            writer.Write(value.runInBackground);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.appName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.companyName, options);
            writer.Write(value.fixedTimeFrameRate);
            writer.Write(value.multiThreadedRenderer);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.layers, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.sortingLayers, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::Staple.AppPlatform, global::System.Collections.Generic.List<global::Staple.RendererType>>>().Serialize(ref writer, value.renderers, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.WindowMode>().Serialize(ref writer, value.defaultWindowMode, options);
            writer.Write(value.defaultWindowWidth);
            writer.Write(value.defaultWindowHeight);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.ColliderMask.Item>>().Serialize(ref writer, value.colliderMask, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.appBundleID, options);
            writer.Write(value.appVersion);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.appDisplayVersion, options);
            writer.Write(value.androidMinSDK);
            writer.Write(value.iOSDeploymentTarget);
            writer.Write(value.portraitOrientation);
            writer.Write(value.landscapeOrientation);
            writer.Write(value.maximumFixedTimestepTime);
            writer.Write(value.physicsFrameRate);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.HashSet<string>>().Serialize(ref writer, value.usedModules, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Color>().Serialize(ref writer, value.ambientLight, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.AppProfilingMode>().Serialize(ref writer, value.profilingMode, options);
            writer.Write(value.enableLighting);
            writer.Write(value.allowFullscreenSwitch);
        }

        public global::Staple.AppSettings Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.AppSettings();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.runInBackground = reader.ReadBoolean();
                        break;
                    case 1:
                        ____result.appName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.companyName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.fixedTimeFrameRate = reader.ReadInt32();
                        break;
                    case 4:
                        ____result.multiThreadedRenderer = reader.ReadBoolean();
                        break;
                    case 5:
                        ____result.layers = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.sortingLayers = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        ____result.renderers = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::Staple.AppPlatform, global::System.Collections.Generic.List<global::Staple.RendererType>>>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        ____result.defaultWindowMode = formatterResolver.GetFormatterWithVerify<global::Staple.WindowMode>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        ____result.defaultWindowWidth = reader.ReadInt32();
                        break;
                    case 10:
                        ____result.defaultWindowHeight = reader.ReadInt32();
                        break;
                    case 11:
                        ____result.colliderMask = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.ColliderMask.Item>>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        ____result.appBundleID = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        ____result.appVersion = reader.ReadInt32();
                        break;
                    case 14:
                        ____result.appDisplayVersion = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        ____result.androidMinSDK = reader.ReadInt32();
                        break;
                    case 16:
                        ____result.iOSDeploymentTarget = reader.ReadInt32();
                        break;
                    case 17:
                        ____result.portraitOrientation = reader.ReadBoolean();
                        break;
                    case 18:
                        ____result.landscapeOrientation = reader.ReadBoolean();
                        break;
                    case 19:
                        ____result.maximumFixedTimestepTime = reader.ReadSingle();
                        break;
                    case 20:
                        ____result.physicsFrameRate = reader.ReadInt32();
                        break;
                    case 21:
                        ____result.usedModules = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.HashSet<string>>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        ____result.ambientLight = formatterResolver.GetFormatterWithVerify<global::Staple.Color>().Deserialize(ref reader, options);
                        break;
                    case 23:
                        ____result.profilingMode = formatterResolver.GetFormatterWithVerify<global::Staple.AppProfilingMode>().Deserialize(ref reader, options);
                        break;
                    case 24:
                        ____result.enableLighting = reader.ReadBoolean();
                        break;
                    case 25:
                        ____result.allowFullscreenSwitch = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ColliderMask_ItemFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.ColliderMask.Item>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.ColliderMask.Item value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(3);
            writer.Write(value.A);
            writer.Write(value.B);
            writer.Write(value.value);
        }

        public global::Staple.ColliderMask.Item Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.ColliderMask.Item();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.A = reader.ReadInt32();
                        break;
                    case 1:
                        ____result.B = reader.ReadInt32();
                        break;
                    case 2:
                        ____result.value = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ColorFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Color>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Color value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(4);
            writer.Write(value.r);
            writer.Write(value.g);
            writer.Write(value.b);
            writer.Write(value.a);
        }

        public global::Staple.Color Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __r__ = default(float);
            var __g__ = default(float);
            var __b__ = default(float);
            var __a__ = default(float);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __r__ = reader.ReadSingle();
                        break;
                    case 1:
                        __g__ = reader.ReadSingle();
                        break;
                    case 2:
                        __b__ = reader.ReadSingle();
                        break;
                    case 3:
                        __a__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Staple.Color(__r__, __g__, __b__, __a__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Color32Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Color32>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Color32 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(4);
            writer.Write(value.r);
            writer.Write(value.g);
            writer.Write(value.b);
            writer.Write(value.a);
        }

        public global::Staple.Color32 Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __r__ = default(byte);
            var __g__ = default(byte);
            var __b__ = default(byte);
            var __a__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __r__ = reader.ReadByte();
                        break;
                    case 1:
                        __g__ = reader.ReadByte();
                        break;
                    case 2:
                        __b__ = reader.ReadByte();
                        break;
                    case 3:
                        __a__ = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Staple.Color32(__r__, __g__, __b__, __a__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RectFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Rect>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Rect value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(4);
            writer.Write(value.left);
            writer.Write(value.right);
            writer.Write(value.top);
            writer.Write(value.bottom);
        }

        public global::Staple.Rect Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __left__ = default(int);
            var __right__ = default(int);
            var __top__ = default(int);
            var __bottom__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __left__ = reader.ReadInt32();
                        break;
                    case 1:
                        __right__ = reader.ReadInt32();
                        break;
                    case 2:
                        __top__ = reader.ReadInt32();
                        break;
                    case 3:
                        __bottom__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Staple.Rect(__left__, __right__, __top__, __bottom__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RectFloatFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.RectFloat>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.RectFloat value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(4);
            writer.Write(value.left);
            writer.Write(value.right);
            writer.Write(value.top);
            writer.Write(value.bottom);
        }

        public global::Staple.RectFloat Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __left__ = default(float);
            var __right__ = default(float);
            var __top__ = default(float);
            var __bottom__ = default(float);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __left__ = reader.ReadSingle();
                        break;
                    case 1:
                        __right__ = reader.ReadSingle();
                        break;
                    case 2:
                        __top__ = reader.ReadSingle();
                        break;
                    case 3:
                        __bottom__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Staple.RectFloat(__left__, __right__, __top__, __bottom__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Vector2IntFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Vector2Int>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Vector2Int value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.X);
            writer.Write(value.Y);
        }

        public global::Staple.Vector2Int Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __X__ = default(int);
            var __Y__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __X__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Y__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Staple.Vector2Int(__X__, __Y__);
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Staple.Internal
{
    using global::System.Buffers;
    using global::MessagePack;

    public sealed class AppSettingsHeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.AppSettingsHeader>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.AppSettingsHeader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<char[]>().Serialize(ref writer, value.header, options);
            writer.Write(value.version);
        }

        public global::Staple.Internal.AppSettingsHeader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.AppSettingsHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.header = formatterResolver.GetFormatterWithVerify<char[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.version = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AssetHolderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.AssetHolder>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.AssetHolder value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.guid, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.typeName, options);
        }

        public global::Staple.Internal.AssetHolder Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.AssetHolder();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.guid = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.typeName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AudioClipMetadataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.AudioClipMetadata>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.AudioClipMetadata value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.guid, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.typeName, options);
            writer.Write(value.loadInBackground);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.AudioRecompression>().Serialize(ref writer, value.recompression, options);
            writer.Write(value.recompressionQuality);
        }

        public global::Staple.Internal.AudioClipMetadata Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.AudioClipMetadata();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.guid = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.typeName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.loadInBackground = reader.ReadBoolean();
                        break;
                    case 3:
                        ____result.recompression = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.AudioRecompression>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.recompressionQuality = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FolderAssetFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.FolderAsset>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.FolderAsset value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.guid, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.typeName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.pakName, options);
        }

        public global::Staple.Internal.FolderAsset Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.FolderAsset();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.guid = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.typeName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.pakName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FontGlyphInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.FontGlyphInfo>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.FontGlyphInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            writer.Write(value.codepoint);
            writer.Write(value.xAdvance);
            writer.Write(value.xOffset);
            writer.Write(value.yOffset);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector4Holder>().Serialize(ref writer, value.bounds, options);
        }

        public global::Staple.Internal.FontGlyphInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.FontGlyphInfo();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.codepoint = reader.ReadInt32();
                        break;
                    case 1:
                        ____result.xAdvance = reader.ReadInt32();
                        break;
                    case 2:
                        ____result.xOffset = reader.ReadInt32();
                        break;
                    case 3:
                        ____result.yOffset = reader.ReadInt32();
                        break;
                    case 4:
                        ____result.bounds = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector4Holder>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FontMetadataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.FontMetadata>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.FontMetadata value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.guid, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.expectedSizes, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.FontCharacterSet>().Serialize(ref writer, value.includedCharacterSets, options);
            writer.Write(value.textureSize);
            writer.Write(value.useAntiAliasing);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.typeName, options);
        }

        public global::Staple.Internal.FontMetadata Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.FontMetadata();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.guid = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.expectedSizes = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.includedCharacterSets = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.FontCharacterSet>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.textureSize = reader.ReadInt32();
                        break;
                    case 4:
                        ____result.useAntiAliasing = reader.ReadBoolean();
                        break;
                    case 5:
                        ____result.typeName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MaterialMetadataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.MaterialMetadata>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.MaterialMetadata value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.guid, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.shader, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, global::Staple.Internal.MaterialParameter>>().Serialize(ref writer, value.parameters, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.enabledShaderVariants, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.CullingMode>().Serialize(ref writer, value.cullingMode, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.typeName, options);
        }

        public global::Staple.Internal.MaterialMetadata Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.MaterialMetadata();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.guid = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.shader = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.parameters = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, global::Staple.Internal.MaterialParameter>>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.enabledShaderVariants = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.cullingMode = formatterResolver.GetFormatterWithVerify<global::Staple.CullingMode>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.typeName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MaterialParameterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.MaterialParameter>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.MaterialParameter value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(9);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MaterialParameterType>().Serialize(ref writer, value.type, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector2Holder>().Serialize(ref writer, value.vec2Value, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Serialize(ref writer, value.vec3Value, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector4Holder>().Serialize(ref writer, value.vec4Value, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.textureValue, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Color32>().Serialize(ref writer, value.colorValue, options);
            writer.Write(value.floatValue);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureWrap>().Serialize(ref writer, value.textureWrapValue, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MaterialParameterSource>().Serialize(ref writer, value.source, options);
        }

        public global::Staple.Internal.MaterialParameter Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.MaterialParameter();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.type = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MaterialParameterType>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.vec2Value = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector2Holder>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.vec3Value = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.vec4Value = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector4Holder>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.textureValue = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.colorValue = formatterResolver.GetFormatterWithVerify<global::Staple.Color32>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.floatValue = reader.ReadSingle();
                        break;
                    case 7:
                        ____result.textureWrapValue = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureWrap>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        ____result.source = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MaterialParameterSource>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MeshAssetAnimationFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.MeshAssetAnimation>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.MeshAssetAnimation value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.name, options);
            writer.Write(value.duration);
            writer.Write(value.ticksPerSecond);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.MeshAssetAnimationChannel>>().Serialize(ref writer, value.channels, options);
        }

        public global::Staple.Internal.MeshAssetAnimation Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.MeshAssetAnimation();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.name = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.duration = reader.ReadSingle();
                        break;
                    case 2:
                        ____result.ticksPerSecond = reader.ReadSingle();
                        break;
                    case 3:
                        ____result.channels = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.MeshAssetAnimationChannel>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MeshAssetAnimationChannelFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.MeshAssetAnimationChannel>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.MeshAssetAnimationChannel value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.nodeName, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.MeshAssetVectorAnimationKey>>().Serialize(ref writer, value.positionKeys, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.MeshAssetQuaternionAnimationKey>>().Serialize(ref writer, value.rotationKeys, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.MeshAssetVectorAnimationKey>>().Serialize(ref writer, value.scaleKeys, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MeshAssetAnimationStateBehaviour>().Serialize(ref writer, value.preState, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MeshAssetAnimationStateBehaviour>().Serialize(ref writer, value.postState, options);
        }

        public global::Staple.Internal.MeshAssetAnimationChannel Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.MeshAssetAnimationChannel();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.nodeName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.positionKeys = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.MeshAssetVectorAnimationKey>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.rotationKeys = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.MeshAssetQuaternionAnimationKey>>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.scaleKeys = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.MeshAssetVectorAnimationKey>>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.preState = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MeshAssetAnimationStateBehaviour>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.postState = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MeshAssetAnimationStateBehaviour>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MeshAssetBoneFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.MeshAssetBone>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.MeshAssetBone value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.name, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Serialize(ref writer, value.offsetPosition, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Serialize(ref writer, value.offsetRotation, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Serialize(ref writer, value.offsetScale, options);
        }

        public global::Staple.Internal.MeshAssetBone Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.MeshAssetBone();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.name = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.offsetPosition = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.offsetRotation = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.offsetScale = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MeshAssetMeshInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.MeshAssetMeshInfo>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.MeshAssetMeshInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(23);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.name, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.materialGuid, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.MeshTopology>().Serialize(ref writer, value.topology, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector3Holder>>().Serialize(ref writer, value.vertices, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector4Holder>>().Serialize(ref writer, value.colors, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector3Holder>>().Serialize(ref writer, value.normals, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector3Holder>>().Serialize(ref writer, value.tangents, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector3Holder>>().Serialize(ref writer, value.bitangents, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.indices, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Serialize(ref writer, value.boundsCenter, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Serialize(ref writer, value.boundsExtents, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector2Holder>>().Serialize(ref writer, value.UV1, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector2Holder>>().Serialize(ref writer, value.UV2, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector2Holder>>().Serialize(ref writer, value.UV3, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector2Holder>>().Serialize(ref writer, value.UV4, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector2Holder>>().Serialize(ref writer, value.UV5, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector2Holder>>().Serialize(ref writer, value.UV6, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector2Holder>>().Serialize(ref writer, value.UV7, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector2Holder>>().Serialize(ref writer, value.UV8, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MeshAssetType>().Serialize(ref writer, value.type, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.MeshAssetBone>>().Serialize(ref writer, value.bones, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector4Holder>>().Serialize(ref writer, value.boneIndices, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector4Holder>>().Serialize(ref writer, value.boneWeights, options);
        }

        public global::Staple.Internal.MeshAssetMeshInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.MeshAssetMeshInfo();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.name = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.materialGuid = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.topology = formatterResolver.GetFormatterWithVerify<global::Staple.MeshTopology>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.vertices = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector3Holder>>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.colors = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector4Holder>>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.normals = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector3Holder>>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.tangents = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector3Holder>>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        ____result.bitangents = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector3Holder>>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        ____result.indices = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        ____result.boundsCenter = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        ____result.boundsExtents = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        ____result.UV1 = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector2Holder>>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        ____result.UV2 = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector2Holder>>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        ____result.UV3 = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector2Holder>>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        ____result.UV4 = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector2Holder>>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        ____result.UV5 = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector2Holder>>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        ____result.UV6 = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector2Holder>>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        ____result.UV7 = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector2Holder>>().Deserialize(ref reader, options);
                        break;
                    case 18:
                        ____result.UV8 = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector2Holder>>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        ____result.type = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MeshAssetType>().Deserialize(ref reader, options);
                        break;
                    case 20:
                        ____result.bones = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.MeshAssetBone>>().Deserialize(ref reader, options);
                        break;
                    case 21:
                        ____result.boneIndices = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector4Holder>>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        ____result.boneWeights = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.Vector4Holder>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MeshAssetMetadataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.MeshAssetMetadata>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.MeshAssetMetadata value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(16);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.guid, options);
            writer.Write(value.makeLeftHanded);
            writer.Write(value.splitLargeMeshes);
            writer.Write(value.preTransformVertices);
            writer.Write(value.flipUVs);
            writer.Write(value.flipWindingOrder);
            writer.Write(value.splitByBoneCount);
            writer.Write(value.debone);
            writer.Write(value.convertUnits);
            writer.Write(value.regenerateNormals);
            writer.Write(value.useSmoothNormals);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MeshAssetRotation>().Serialize(ref writer, value.rotation, options);
            writer.Write(value.scale);
            formatterResolver.GetFormatterWithVerify<global::Staple.MaterialLighting>().Serialize(ref writer, value.lighting, options);
            writer.Write(value.frameRate);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.typeName, options);
        }

        public global::Staple.Internal.MeshAssetMetadata Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.MeshAssetMetadata();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.guid = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.makeLeftHanded = reader.ReadBoolean();
                        break;
                    case 2:
                        ____result.splitLargeMeshes = reader.ReadBoolean();
                        break;
                    case 3:
                        ____result.preTransformVertices = reader.ReadBoolean();
                        break;
                    case 4:
                        ____result.flipUVs = reader.ReadBoolean();
                        break;
                    case 5:
                        ____result.flipWindingOrder = reader.ReadBoolean();
                        break;
                    case 6:
                        ____result.splitByBoneCount = reader.ReadBoolean();
                        break;
                    case 7:
                        ____result.debone = reader.ReadBoolean();
                        break;
                    case 8:
                        ____result.convertUnits = reader.ReadBoolean();
                        break;
                    case 9:
                        ____result.regenerateNormals = reader.ReadBoolean();
                        break;
                    case 10:
                        ____result.useSmoothNormals = reader.ReadBoolean();
                        break;
                    case 11:
                        ____result.rotation = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MeshAssetRotation>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        ____result.scale = reader.ReadSingle();
                        break;
                    case 13:
                        ____result.lighting = formatterResolver.GetFormatterWithVerify<global::Staple.MaterialLighting>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        ____result.frameRate = reader.ReadInt32();
                        break;
                    case 15:
                        ____result.typeName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MeshAssetNodeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.MeshAssetNode>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.MeshAssetNode value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.name, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Serialize(ref writer, value.position, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Serialize(ref writer, value.rotation, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Serialize(ref writer, value.scale, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.children, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Serialize(ref writer, value.meshIndices, options);
        }

        public global::Staple.Internal.MeshAssetNode Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.MeshAssetNode();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.name = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.position = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.rotation = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.scale = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.children = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.meshIndices = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MeshAssetQuaternionAnimationKeyFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.MeshAssetQuaternionAnimationKey>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.MeshAssetQuaternionAnimationKey value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.time);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector4Holder>().Serialize(ref writer, value.value, options);
        }

        public global::Staple.Internal.MeshAssetQuaternionAnimationKey Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.MeshAssetQuaternionAnimationKey();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.time = reader.ReadSingle();
                        break;
                    case 1:
                        ____result.value = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector4Holder>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MeshAssetVectorAnimationKeyFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.MeshAssetVectorAnimationKey>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.MeshAssetVectorAnimationKey value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.time);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Serialize(ref writer, value.value, options);
        }

        public global::Staple.Internal.MeshAssetVectorAnimationKey Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.MeshAssetVectorAnimationKey();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.time = reader.ReadSingle();
                        break;
                    case 1:
                        ____result.value = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResourcePak_EntryFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.ResourcePak.Entry>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.ResourcePak.Entry value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            writer.Write(value.guid);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.path, options);
            writer.Write(value.size);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.typeName, options);
        }

        public global::Staple.Internal.ResourcePak.Entry Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.ResourcePak.Entry();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.guid = reader.ReadBytes()?.ToArray();
                        break;
                    case 1:
                        ____result.path = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.size = reader.ReadInt64();
                        break;
                    case 3:
                        ____result.typeName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResourcePak_HeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.ResourcePak.Header>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.ResourcePak.Header value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<char[]>().Serialize(ref writer, value.header, options);
            writer.Write(value.version);
        }

        public global::Staple.Internal.ResourcePak.Header Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.ResourcePak.Header();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.header = formatterResolver.GetFormatterWithVerify<char[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.version = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SceneComponentFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SceneComponent>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SceneComponent value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.type, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.SceneComponentParameter>>().Serialize(ref writer, value.parameters, options);
        }

        public global::Staple.Internal.SceneComponent Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SceneComponent();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.type = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.parameters = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.SceneComponentParameter>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SceneComponentParameterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SceneComponentParameter>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SceneComponentParameter value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.name, options);
            formatterResolver.GetFormatterWithVerify<object>().Serialize(ref writer, value.value, options);
        }

        public global::Staple.Internal.SceneComponentParameter Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SceneComponentParameter();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.name = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.value = formatterResolver.GetFormatterWithVerify<object>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SceneListFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SceneList>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SceneList value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.scenes, options);
        }

        public global::Staple.Internal.SceneList Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SceneList();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.scenes = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SceneListHeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SceneListHeader>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SceneListHeader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<char[]>().Serialize(ref writer, value.header, options);
            writer.Write(value.version);
        }

        public global::Staple.Internal.SceneListHeader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SceneListHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.header = formatterResolver.GetFormatterWithVerify<char[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.version = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SceneObjectFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SceneObject>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SceneObject value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(10);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.SceneObjectKind>().Serialize(ref writer, value.kind, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.name, options);
            writer.Write(value.ID);
            writer.Write(value.parent);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.SceneObjectTransform>().Serialize(ref writer, value.transform, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.SceneComponent>>().Serialize(ref writer, value.components, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.layer, options);
            writer.Write(value.enabled);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.prefabGuid, options);
            writer.Write(value.prefabLocalID);
        }

        public global::Staple.Internal.SceneObject Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SceneObject();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.kind = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.SceneObjectKind>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.name = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.ID = reader.ReadInt32();
                        break;
                    case 3:
                        ____result.parent = reader.ReadInt32();
                        break;
                    case 4:
                        ____result.transform = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.SceneObjectTransform>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.components = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.SceneComponent>>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.layer = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        ____result.enabled = reader.ReadBoolean();
                        break;
                    case 8:
                        ____result.prefabGuid = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        ____result.prefabLocalID = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SceneObjectTransformFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SceneObjectTransform>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SceneObjectTransform value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Serialize(ref writer, value.position, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Serialize(ref writer, value.rotation, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Serialize(ref writer, value.scale, options);
        }

        public global::Staple.Internal.SceneObjectTransform Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SceneObjectTransform();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.position = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.rotation = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.scale = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.Vector3Holder>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableAudioClipFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableAudioClip>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableAudioClip value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.AudioClipMetadata>().Serialize(ref writer, value.metadata, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.AudioClipFormat>().Serialize(ref writer, value.format, options);
            writer.Write(value.fileData);
        }

        public global::Staple.Internal.SerializableAudioClip Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableAudioClip();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.metadata = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.AudioClipMetadata>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.format = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.AudioClipFormat>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.fileData = reader.ReadBytes()?.ToArray();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableAudioClipHeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableAudioClipHeader>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableAudioClipHeader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<char[]>().Serialize(ref writer, value.header, options);
            writer.Write(value.version);
        }

        public global::Staple.Internal.SerializableAudioClipHeader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableAudioClipHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.header = formatterResolver.GetFormatterWithVerify<char[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.version = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableFontFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableFont>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableFont value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.FontMetadata>().Serialize(ref writer, value.metadata, options);
            writer.Write(value.fontData);
        }

        public global::Staple.Internal.SerializableFont Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableFont();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.metadata = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.FontMetadata>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.fontData = reader.ReadBytes()?.ToArray();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableFontHeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableFontHeader>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableFontHeader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<char[]>().Serialize(ref writer, value.header, options);
            writer.Write(value.version);
        }

        public global::Staple.Internal.SerializableFontHeader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableFontHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.header = formatterResolver.GetFormatterWithVerify<char[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.version = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableMaterialFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableMaterial>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableMaterial value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MaterialMetadata>().Serialize(ref writer, value.metadata, options);
        }

        public global::Staple.Internal.SerializableMaterial Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableMaterial();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.metadata = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MaterialMetadata>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableMaterialHeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableMaterialHeader>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableMaterialHeader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<char[]>().Serialize(ref writer, value.header, options);
            writer.Write(value.version);
        }

        public global::Staple.Internal.SerializableMaterialHeader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableMaterialHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.header = formatterResolver.GetFormatterWithVerify<char[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.version = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableMeshAssetFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableMeshAsset>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableMeshAsset value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MeshAssetMetadata>().Serialize(ref writer, value.metadata, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.MeshAssetMeshInfo>>().Serialize(ref writer, value.meshes, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MeshAssetNode[]>().Serialize(ref writer, value.nodes, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.MeshAssetAnimation>>().Serialize(ref writer, value.animations, options);
        }

        public global::Staple.Internal.SerializableMeshAsset Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableMeshAsset();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.metadata = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MeshAssetMetadata>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.meshes = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.MeshAssetMeshInfo>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.nodes = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.MeshAssetNode[]>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.animations = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.MeshAssetAnimation>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableMeshAssetHeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableMeshAssetHeader>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableMeshAssetHeader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<char[]>().Serialize(ref writer, value.header, options);
            writer.Write(value.version);
        }

        public global::Staple.Internal.SerializableMeshAssetHeader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableMeshAssetHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.header = formatterResolver.GetFormatterWithVerify<char[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.version = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializablePrefabFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializablePrefab>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializablePrefab value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.guid, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.SceneObject>().Serialize(ref writer, value.mainObject, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.SceneObject>>().Serialize(ref writer, value.children, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.typeName, options);
        }

        public global::Staple.Internal.SerializablePrefab Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializablePrefab();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.guid = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.mainObject = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.SceneObject>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.children = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.SceneObject>>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.typeName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializablePrefabHeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializablePrefabHeader>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializablePrefabHeader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<char[]>().Serialize(ref writer, value.header, options);
            writer.Write(value.version);
        }

        public global::Staple.Internal.SerializablePrefabHeader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializablePrefabHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.header = formatterResolver.GetFormatterWithVerify<char[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.version = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableSceneFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableScene>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableScene value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.guid, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.SceneObject>>().Serialize(ref writer, value.objects, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.typeName, options);
        }

        public global::Staple.Internal.SerializableScene Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableScene();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.guid = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.objects = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.SceneObject>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.typeName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableSceneHeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableSceneHeader>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableSceneHeader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<char[]>().Serialize(ref writer, value.header, options);
            writer.Write(value.version);
        }

        public global::Staple.Internal.SerializableSceneHeader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableSceneHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.header = formatterResolver.GetFormatterWithVerify<char[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.version = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableShaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableShader>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableShader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.ShaderMetadata>().Serialize(ref writer, value.metadata, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, global::Staple.Internal.SerializableShaderData>>().Serialize(ref writer, value.data, options);
        }

        public global::Staple.Internal.SerializableShader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableShader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.metadata = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.ShaderMetadata>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.data = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, global::Staple.Internal.SerializableShaderData>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableShaderDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableShaderData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableShaderData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(3);
            writer.Write(value.vertexShader);
            writer.Write(value.fragmentShader);
            writer.Write(value.computeShader);
        }

        public global::Staple.Internal.SerializableShaderData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableShaderData();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.vertexShader = reader.ReadBytes()?.ToArray();
                        break;
                    case 1:
                        ____result.fragmentShader = reader.ReadBytes()?.ToArray();
                        break;
                    case 2:
                        ____result.computeShader = reader.ReadBytes()?.ToArray();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableShaderHeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableShaderHeader>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableShaderHeader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<char[]>().Serialize(ref writer, value.header, options);
            writer.Write(value.version);
        }

        public global::Staple.Internal.SerializableShaderHeader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableShaderHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.header = formatterResolver.GetFormatterWithVerify<char[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.version = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableStapleAssetFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableStapleAsset>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableStapleAsset value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.guid, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.typeName, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, global::Staple.Internal.SerializableStapleAssetParameter>>().Serialize(ref writer, value.parameters, options);
        }

        public global::Staple.Internal.SerializableStapleAsset Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableStapleAsset();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.guid = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.typeName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.parameters = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, global::Staple.Internal.SerializableStapleAssetParameter>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableStapleAssetContainerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableStapleAssetContainer>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableStapleAssetContainer value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.typeName, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, global::Staple.Internal.SerializableStapleAssetParameter>>().Serialize(ref writer, value.parameters, options);
        }

        public global::Staple.Internal.SerializableStapleAssetContainer Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableStapleAssetContainer();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.typeName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.parameters = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<string, global::Staple.Internal.SerializableStapleAssetParameter>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableStapleAssetHeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableStapleAssetHeader>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableStapleAssetHeader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<char[]>().Serialize(ref writer, value.header, options);
            writer.Write(value.version);
        }

        public global::Staple.Internal.SerializableStapleAssetHeader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableStapleAssetHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.header = formatterResolver.GetFormatterWithVerify<char[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.version = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableStapleAssetParameterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableStapleAssetParameter>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableStapleAssetParameter value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.typeName, options);
            formatterResolver.GetFormatterWithVerify<object>().Serialize(ref writer, value.value, options);
        }

        public global::Staple.Internal.SerializableStapleAssetParameter Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableStapleAssetParameter();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.typeName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.value = formatterResolver.GetFormatterWithVerify<object>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableTextureFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableTexture>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableTexture value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureMetadata>().Serialize(ref writer, value.metadata, options);
            writer.Write(value.data);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.SerializableTextureCPUData>().Serialize(ref writer, value.cpuData, options);
        }

        public global::Staple.Internal.SerializableTexture Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableTexture();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.metadata = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureMetadata>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.data = reader.ReadBytes()?.ToArray();
                        break;
                    case 2:
                        ____result.cpuData = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.SerializableTextureCPUData>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableTextureCPUDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableTextureCPUData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableTextureCPUData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<global::Staple.StandardTextureColorComponents>().Serialize(ref writer, value.colorComponents, options);
            writer.Write(value.data);
            writer.Write(value.width);
            writer.Write(value.height);
        }

        public global::Staple.Internal.SerializableTextureCPUData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableTextureCPUData();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.colorComponents = formatterResolver.GetFormatterWithVerify<global::Staple.StandardTextureColorComponents>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.data = reader.ReadBytes()?.ToArray();
                        break;
                    case 2:
                        ____result.width = reader.ReadInt32();
                        break;
                    case 3:
                        ____result.height = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializableTextureHeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.SerializableTextureHeader>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.SerializableTextureHeader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<char[]>().Serialize(ref writer, value.header, options);
            writer.Write(value.version);
        }

        public global::Staple.Internal.SerializableTextureHeader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.SerializableTextureHeader();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.header = formatterResolver.GetFormatterWithVerify<char[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.version = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ShaderInstanceParameterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.ShaderInstanceParameter>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.ShaderInstanceParameter value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.name, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.ShaderUniformType>().Serialize(ref writer, value.type, options);
        }

        public global::Staple.Internal.ShaderInstanceParameter Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.ShaderInstanceParameter();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.name = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.type = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.ShaderUniformType>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ShaderMetadataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.ShaderMetadata>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.ShaderMetadata value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.guid, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.ShaderType>().Serialize(ref writer, value.type, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.variants, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.ShaderUniform>>().Serialize(ref writer, value.uniforms, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.ShaderInstanceParameter>>().Serialize(ref writer, value.instanceParameters, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.BlendMode>().Serialize(ref writer, value.sourceBlend, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.BlendMode>().Serialize(ref writer, value.destinationBlend, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.typeName, options);
        }

        public global::Staple.Internal.ShaderMetadata Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.ShaderMetadata();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.guid = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.type = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.ShaderType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.variants = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.uniforms = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.ShaderUniform>>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.instanceParameters = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.ShaderInstanceParameter>>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.sourceBlend = formatterResolver.GetFormatterWithVerify<global::Staple.BlendMode>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.destinationBlend = formatterResolver.GetFormatterWithVerify<global::Staple.BlendMode>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        ____result.typeName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ShaderUniformFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.ShaderUniform>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.ShaderUniform value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.name, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.ShaderUniformType>().Serialize(ref writer, value.type, options);
            writer.Write(value.slot);
        }

        public global::Staple.Internal.ShaderUniform Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.ShaderUniform();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.name = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.type = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.ShaderUniformType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.slot = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TextureMetadataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.TextureMetadata>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.TextureMetadata value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(23);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.guid, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureType>().Serialize(ref writer, value.type, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureMetadataFormat>().Serialize(ref writer, value.format, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureMetadataQuality>().Serialize(ref writer, value.quality, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureFilter>().Serialize(ref writer, value.filter, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureWrap>().Serialize(ref writer, value.wrapU, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureWrap>().Serialize(ref writer, value.wrapV, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureWrap>().Serialize(ref writer, value.wrapW, options);
            writer.Write(value.premultiplyAlpha);
            writer.Write(value.maxSize);
            writer.Write(value.useMipmaps);
            writer.Write(value.isLinear);
            writer.Write(value.spritePixelsPerUnit);
            writer.Write(value.readBack);
            writer.Write(value.keepOnCPU);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.SpriteTextureMethod>().Serialize(ref writer, value.spriteTextureMethod, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Vector2Int>().Serialize(ref writer, value.spriteTextureGridSize, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.TextureSpriteInfo>>().Serialize(ref writer, value.sprites, options);
            writer.Write(value.shouldPack);
            writer.Write(value.padding);
            writer.Write(value.trimDuplicates);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::Staple.AppPlatform, global::Staple.Internal.TextureMetadataOverride>>().Serialize(ref writer, value.overrides, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.typeName, options);
        }

        public global::Staple.Internal.TextureMetadata Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.TextureMetadata();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.guid = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.type = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.format = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureMetadataFormat>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.quality = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureMetadataQuality>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.filter = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureFilter>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.wrapU = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureWrap>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.wrapV = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureWrap>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        ____result.wrapW = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureWrap>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        ____result.premultiplyAlpha = reader.ReadBoolean();
                        break;
                    case 9:
                        ____result.maxSize = reader.ReadInt32();
                        break;
                    case 10:
                        ____result.useMipmaps = reader.ReadBoolean();
                        break;
                    case 11:
                        ____result.isLinear = reader.ReadBoolean();
                        break;
                    case 12:
                        ____result.spritePixelsPerUnit = reader.ReadInt32();
                        break;
                    case 13:
                        ____result.readBack = reader.ReadBoolean();
                        break;
                    case 14:
                        ____result.keepOnCPU = reader.ReadBoolean();
                        break;
                    case 15:
                        ____result.spriteTextureMethod = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.SpriteTextureMethod>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        ____result.spriteTextureGridSize = formatterResolver.GetFormatterWithVerify<global::Staple.Vector2Int>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        ____result.sprites = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Staple.Internal.TextureSpriteInfo>>().Deserialize(ref reader, options);
                        break;
                    case 18:
                        ____result.shouldPack = reader.ReadBoolean();
                        break;
                    case 19:
                        ____result.padding = reader.ReadInt32();
                        break;
                    case 20:
                        ____result.trimDuplicates = reader.ReadBoolean();
                        break;
                    case 21:
                        ____result.overrides = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::Staple.AppPlatform, global::Staple.Internal.TextureMetadataOverride>>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        ____result.typeName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TextureMetadataOverrideFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.TextureMetadataOverride>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.TextureMetadataOverride value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            writer.Write(value.shouldOverride);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureMetadataFormat>().Serialize(ref writer, value.format, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureMetadataQuality>().Serialize(ref writer, value.quality, options);
            writer.Write(value.maxSize);
            writer.Write(value.premultiplyAlpha);
        }

        public global::Staple.Internal.TextureMetadataOverride Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.TextureMetadataOverride();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.shouldOverride = reader.ReadBoolean();
                        break;
                    case 1:
                        ____result.format = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureMetadataFormat>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.quality = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureMetadataQuality>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.maxSize = reader.ReadInt32();
                        break;
                    case 4:
                        ____result.premultiplyAlpha = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TextureSpriteInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.TextureSpriteInfo>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.TextureSpriteInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::Staple.Rect>().Serialize(ref writer, value.rect, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureSpriteRotation>().Serialize(ref writer, value.rotation, options);
            formatterResolver.GetFormatterWithVerify<global::Staple.Rect>().Serialize(ref writer, value.originalRect, options);
        }

        public global::Staple.Internal.TextureSpriteInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.TextureSpriteInfo();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.rect = formatterResolver.GetFormatterWithVerify<global::Staple.Rect>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.rotation = formatterResolver.GetFormatterWithVerify<global::Staple.Internal.TextureSpriteRotation>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.originalRect = formatterResolver.GetFormatterWithVerify<global::Staple.Rect>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Vector2HolderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.Vector2Holder>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.Vector2Holder value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(2);
            writer.Write(value.x);
            writer.Write(value.y);
        }

        public global::Staple.Internal.Vector2Holder Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.Vector2Holder();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.x = reader.ReadSingle();
                        break;
                    case 1:
                        ____result.y = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Vector3HolderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.Vector3Holder>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.Vector3Holder value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(3);
            writer.Write(value.x);
            writer.Write(value.y);
            writer.Write(value.z);
        }

        public global::Staple.Internal.Vector3Holder Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.Vector3Holder();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.x = reader.ReadSingle();
                        break;
                    case 1:
                        ____result.y = reader.ReadSingle();
                        break;
                    case 2:
                        ____result.z = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Vector4HolderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Staple.Internal.Vector4Holder>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Staple.Internal.Vector4Holder value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(4);
            writer.Write(value.x);
            writer.Write(value.y);
            writer.Write(value.z);
            writer.Write(value.w);
        }

        public global::Staple.Internal.Vector4Holder Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::Staple.Internal.Vector4Holder();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.x = reader.ReadSingle();
                        break;
                    case 1:
                        ____result.y = reader.ReadSingle();
                        break;
                    case 2:
                        ____result.z = reader.ReadSingle();
                        break;
                    case 3:
                        ____result.w = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

